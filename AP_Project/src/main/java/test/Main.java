package test;

import bignumbers.BigNumber;
import bignumbers.Sign;

import java.math.BigInteger;

public class Main {

    public static void main(String[] args) {

//        BigNumber b1 = BigNumber.fromString("-851735632487056130958731251098174189057134098563248705613095873190571340985251345885173563248705613095873125109817418905713409856324870561309587319057134098525134588517356324870561309587312510981741890571340985632487056130958731905713409852513458851735632487056130958731251098174189057134098563248705613095873190571340985251345885173563248705613095873125109817418905713409856324870561309587319057134098525134588517356324870561309587312510981741890571340985632487056130958731905713409852513458851735632487056130958731251098174189057134098563248705613095873190571340985251345885173563248705613095873125109817418905713409856324870561309587319057134098525134588517356324870561309587312510981741890571340985632487056130958731905713409852513458851735632487056130958731251098174189057134098563248705613095873190571340985251345885173563248705613095873125109817418905713409856324870561309587319057134098525134588517356324870561309587312510981741890571340985632487056130958731905713409852513458851735632487056130958731251098174189057134098563248705613095873190571340985251345885173563248705613095873125109817418905713409856324870561309587319057134098525134588517356324870561309587312510981741890571340985632487056130958731905713409852513458851735632487056130958731251098174189057134098563248705613095873190571340985251345885173563248705613095873125109817418905713409856324870561309587319057134098525134588517356324870561309587312510981741890571340985632487056130958731905713409852513458851735632487056130958731251098174189057134098563248705613095873190571340985251345885173563248705613095873125109817418905713409856324870561309587319057134098525134588517356324870561309587312510981741890571340985632487056130958731905713409852513458851735632487056130958731251098174189057134098563248705613095873190571340985251345885173563248705613095873125109817418905713409856324870561309587319057134098525134588517356324870561309587312510981741890571340985632487056130958731905713409852513458851735632487056130958731251098174189057134098563248705613095873190571340985251345885173563248705613095873125109817418905713409856324870561309587319057134098525134588517356324870561309587312510981741890571340985632487056130958731905713409852513458851735632487056130958731251098174189057134098563248705613095873190571340985251345885173563248705613095873125109817418905713409856324870561309587319057134098525134588517356324870561309587312510981741890571340985632487056130958731905713409852513458");
//        BigNumber b2 = BigNumber.fromString
//        BigInteger a1 = new BigInteger("-851735632487056130958731251098174189057134098563248705613095873190571340985251345885173563248705613095873125109817418905713409856324870561309587319057134098525134588517356324870561309587312510981741890571340985632487056130958731905713409852513458851735632487056130958731251098174189057134098563248705613095873190571340985251345885173563248705613095873125109817418905713409856324870561309587319057134098525134588517356324870561309587312510981741890571340985632487056130958731905713409852513458851735632487056130958731251098174189057134098563248705613095873190571340985251345885173563248705613095873125109817418905713409856324870561309587319057134098525134588517356324870561309587312510981741890571340985632487056130958731905713409852513458851735632487056130958731251098174189057134098563248705613095873190571340985251345885173563248705613095873125109817418905713409856324870561309587319057134098525134588517356324870561309587312510981741890571340985632487056130958731905713409852513458851735632487056130958731251098174189057134098563248705613095873190571340985251345885173563248705613095873125109817418905713409856324870561309587319057134098525134588517356324870561309587312510981741890571340985632487056130958731905713409852513458851735632487056130958731251098174189057134098563248705613095873190571340985251345885173563248705613095873125109817418905713409856324870561309587319057134098525134588517356324870561309587312510981741890571340985632487056130958731905713409852513458851735632487056130958731251098174189057134098563248705613095873190571340985251345885173563248705613095873125109817418905713409856324870561309587319057134098525134588517356324870561309587312510981741890571340985632487056130958731905713409852513458851735632487056130958731251098174189057134098563248705613095873190571340985251345885173563248705613095873125109817418905713409856324870561309587319057134098525134588517356324870561309587312510981741890571340985632487056130958731905713409852513458851735632487056130958731251098174189057134098563248705613095873190571340985251345885173563248705613095873125109817418905713409856324870561309587319057134098525134588517356324870561309587312510981741890571340985632487056130958731905713409852513458851735632487056130958731251098174189057134098563248705613095873190571340985251345885173563248705613095873125109817418905713409856324870561309587319057134098525134588517356324870561309587312510981741890571340985632487056130958731905713409852513458");
//        BigInteger a2 = new BigInteger
//
//        long myStart = System.currentTimeMillis();
//        System.out.println(b1.divide(b2));
//        long myEnd = System.currentTimeMillis();
//
//        long start = System.currentTimeMillis();
//        System.out.println(a1.divide(a2));
//        long end = System.currentTimeMillis();
//
//        System.out.println("my algorithm's execution time: " + (myEnd - myStart));
//        System.out.println("BigInteger's execution time: " + (end - start));
//
//        String s1 = "8517309817418905713409856324870561309587312513458y134876157834651873456391785613875632849756395876435872652438795689743265184975621389756389457658913659834756y134897564871605789563045610345671056341708561y3480756134805761304857657861438057648157365740356843765170348563287045643870156438756382176587341651849623846021893472103895631490856735783180563218075689437561308563297546380563145610356739847563247856340856712398576324056732489756238497563786518051875346598723645897546257823569618032765yy134897564871605789563045610345671056341708561y3480756134805761304857657861438057648157365740356843765170348563287045643870156438756382176587341651849623846021893472103895631490856735783180563218075689437561308563297546380563145610356739847563247856340856712398576324056732489756238497563786518051875346598723645897546257823569618032765y7341085612037029137561023561705358947563248956347856985612809326401895109856984756234857623489576103845632748562398475608457623984756324785608457619845761234985762348975634280756329857639845679382457618957632148761481746389231764872165871237456981753681923476589345765689345618756891765389274612983576289357689215762893457602156056013560560150000000005780587134573240857623984563485763187457634897568561871246812346783274563478568745368231479847156198576984387019357130294578431095234089576149057823408572340895710457670471309856130847651479847156198576984387019357130294578431095234089576149057823408572340895710457670471309856130847651";
//        s1 = s1.replaceAll("\\D", "0");
//        s1 = "-".concat(s1);
//        String s2 = "851730981741890571340985632487056130958730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008517309817418905713409856324870561309587312513458y134876157834651873456391785613875632849756395876435872652438795689743265184975621389756389457658913659834756y134897564871605789563045610345671056341708561y3480756134805761304857657861438057648157365740356843765170348563287045643870156438756382176587341651849623846021893472103895631490856735783180563218075689437561308563297546380563145610356739847563247856340856712398576324056732489756238497563786518051875346598723645897546257823569618032765yy134897564871605789563045610345671056341708561y3480756134805761304857657861438057648157365740356843765170348563287045643870156438756382176587341651849623846021893472103895631490856735783180563218075689437561308563297546380563145610356739847563247856340856712398576324056732489756238497563786518051875346598723645897546257823569618032765yy134897564871605789563045610345671056341708561y3480756134805761304857657861438057648157365740356843765170348563287045643870156438756382176587341651849623846021893472103895631490856735783180563218075689437561308563297546380563145610356739847563247856340856712398576324056732489756238497563786518051875346598723645897546257823569618032765y7341085612037029137561023561705358947563248956347856985612809326401895109856984756234857623489576103845632748562398475608457623984756324785608457619845761234985762348975634280756329857639845679382457618957632148761481746389231764872165871237456981753681923476589345765689345618756891765389274612983576289357689215762893457602156056013560560150000000005780587134573240857623984563485763187457634897568561871246812346783274563478568745368231479847156198576984387019357130294578431095234089576149057823408572340895710457670471309856130847651";
//        s2 = s2.replaceAll("\\D", "0");
//
//        long myStart1 = System.currentTimeMillis();
//        BigNumber bigNumber = BigNumber.fromString(s1).multiply(BigNumber.fromString(s2));
//        long myEnd1 = System.currentTimeMillis();
//        System.out.println(bigNumber);
//        long start1 = System.currentTimeMillis();
//        BigInteger bigInteger = new BigInteger(s1).multiply(new BigInteger(s2));
//        long end1 = System.currentTimeMillis();
//        System.out.println(bigInteger);
//        System.out.println(bigInteger.compareTo(new BigInteger(bigNumber.toString())));
//        System.out.println("my algorithm's execution time: " + (myEnd1 - myStart1));
//        System.out.println("BigInteger's execution time: " + (end1 - start1));
//
//        byte[] by = new byte[] {1, 2, 3, 4, 5};
//        BigNumber fba = BigNumber.fromByteArray(by, Sign.NEGATIVE);
//        System.out.println(fba);
//
//        BigNumber fs = BigNumber.fromString("-54321");
//        System.out.println(fs);
//
//        BigNumber fl = BigNumber.fromLong(-123456789);
//        System.out.println(fl);
//
//        int[] in = new int[] {1, 2, 3, 4, 5};
//        BigNumber fi = BigNumber.fromIntArray(in, Sign.NEGATIVE);
//        System.out.println(fi);

        StringBuilder b1 = new StringBuilder();
        StringBuilder b2 = new StringBuilder();
        boolean flag = false;
        String errorIn = "";
        for(int i=0;i<=1000;i++){
            b1.setLength(0);
            b2.setLength(0);

            int n = (int)(Math.random() * 1000);
            int m = (int)(Math.random() * 1000);
            int s1 = (int)(Math.random() * 10);
            int s2 = (int)(Math.random() * 10);
            if(s1%2==0)
                b1.append("-");
            if(s2%2==0)
                b2.append("-");
            for(int j=0;j<=n;j++){
                b1.append((int)(Math.random()*10));
            }
            for(int j=0;j<=m;j++){
                b2.append((int)(Math.random()*10));
            }

            BigNumber a = BigNumber.fromString(b1.toString());
            BigNumber b = BigNumber.fromString(b2.toString());
            BigInteger x = new BigInteger(b1.toString());
            BigInteger y = new BigInteger(b2.toString());

            try{
                if(!a.divide(b).toString().equals(x.divide(y).toString())){
                    flag = true;
                    errorIn  = "divide";
                }
            }catch (Exception ex){
                if(!ex.getMessage().equals("Division by zero")){
                    flag = true;
                    errorIn  = "divide";
                }
            }
            if(!a.multiply(b).toString().equals(x.multiply(y).toString())){
                flag = true;
                errorIn  = "multiply";
            }
            if(!a.add(b).toString().equals(x.add(y).toString())){
                flag = true;
                errorIn  = "add";
            }
            if(flag){
                System.out.println("num1: "+ b1.toString());
                System.out.println("num2: "+ b2.toString());
                System.out.println("operation: "+errorIn);
            }
        }
        if(!flag){
            System.out.println("Everything is Ok");
        }

    }
}
